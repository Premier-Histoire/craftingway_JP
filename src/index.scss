@import "normalize.css";
@import "variables.css";

@import "@fontsource/fira-mono/latin-400.css";
@import "@fontsource/fira-mono/latin-500.css";
@import "@fontsource/fira-mono/latin-700.css";

* {
  line-height: 1.5;
}

:root {
  min-height: 100vh;

  font-family: "Fira Mono", monospace;
  font-weight: 400;
  color-scheme: dark;
  color: var(--text-color);
  background-color: var(--grey-900);

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  display: flex;
  justify-content: center;
}

button.link {
  color: var(--text-muted-color);
  background: none;
  text-decoration: underline;
  border: 0;
  padding: 0;
  margin: 0;

  &:hover {
    color: var(--link-hover-color);
    cursor: pointer;
  }
}

h1,
h2,
h3 {
  font-weight: 400;
  margin: 0;
}

h1 {
  font-size: 2rem;
}

h2 {
  font-size: 1.5rem;
}

h3 {
  font-size: 1.25rem;
}

input {
  color: var(--text-color);
  background-color: var(--grey-800);
  padding: var(--025) var(--05);
  border: none;
  border-radius: var(--border-radius);
}

input:focus {
  outline: 1px solid var(--focus-color);
}

input[type="number"] {
  appearance: textfield;
  text-align: right;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  appearance: none;
  -webkit-appearance: none;
}

section {
  width: 100%;
  padding: var(--1) var(--05);
  display: flex;
  flex-direction: column;
  gap: var(--1);
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: calc(-1 * var(--15));
    height: 100%;
    width: var(--025);
    border-radius: var(--border-radius);
    background-color: var(--grey-800);
    transition: background-color 140ms ease-in-out;
  }

  &:hover::before {
    background-color: var(--orange-200);
  }
}

.combobox {
  width: 100%;
  position: relative;

  input {
    width: 100%;
  }

  ul {
    position: absolute;
    width: 100%;
    color: var(--text-color);
    background: var(--grey-800);
    border-radius: var(--border-radius);

    list-style: none;
    padding: 0;
    margin: var(--05) 0 0 0;
    user-select: none;
    z-index: 1;
  }

  li {
    font-size: var(--small-font-size);
    cursor: pointer;
    padding: var(--025) var(--05);
    margin: var(--05) 0;

    &.selected,
    &:hover {
      background: var(--grey-600);
    }
  }

  .highlight {
    font-weight: 400;
  }
}

.field {
  display: flex;
  align-items: baseline;
  gap: 0.5em;
}

.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  word-wrap: normal;
  white-space: nowrap;
}

.App {
  width: 100%;
  max-width: 600px;
  padding: var(--15);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--15);

  h1 {
    margin-top: var(--3);

    span {
      color: var(--orange-200);
    }
  }
}

.Emoji {
  img.emoji {
    height: 1em;
    width: 1em;
    vertical-align: -0.15em;
  }
}

.Icon {
  picture {
    display: block;
    overflow: hidden;
  }

  img {
    width: 100%;
    height: 100%;
  }

  // these icons are supersampled, so normal transparency is lost
  // ...and I'm too lazy to fix them.
  // as a hacky workaround, use border-radius and clip-path

  &.action picture {
    height: var(--action-icon-height);
    border-radius: 12.5%;
  }

  &.status picture {
    height: var(--status-icon-height);
    clip-path: polygon(8% 81%, 9% 20%, 50% 5%, 91% 20%, 92% 81%);
  }

  // ensure numerals in the top right don't get cut off
  &.status.with-stacks picture {
    clip-path: polygon(8% 81%, 9% 20%, 50% 5%, 65% 12%, 80% 10%, 91% 9%, 93% 20%, 91% 31%, 92% 81%);
  }

  &.status.with-expiry {
    position: relative;
  }

  &.status.with-expiry .expiry {
    position: absolute;
    width: 100%;
    text-align: center;
    bottom: -1em;
  }
}

.PlayerConfig {
  align-items: center;

  .Emoji {
    margin-right: 0.25em;
  }

  fieldset {
    width: 100%;
    padding: 0;
    margin: 0;
    border: none;
    display: grid;
    grid-template-columns: repeat(8, auto);
    gap: 0.5em 1em;

    @media (max-width: 36em) {
      grid-template-columns: repeat(4, auto);
      grid-template-rows: repeat(2, auto);
    }

    label {
      text-align: center;
      padding: var(--05);
      margin: calc(-1 * var(--05));
      cursor: pointer;
      opacity: 0.45;
      transition: opacity 70ms;
    }

    input:checked + label {
      cursor: default;
      opacity: 1;
    }
  }

  .stats {
    display: grid;
    grid-template-columns: repeat(2, auto);
    grid-template-rows: repeat(3, auto);
    justify-items: flex-end;
    column-gap: var(--2);
    row-gap: var(--05);

    .field:first-child {
      grid-row: 1 / -1;
    }

    #input-job_level {
      width: 2.5em;
    }

    #input-craftsmanship,
    #input-control,
    #input-cp {
      width: 4em;
    }
  }

  .prompts {
    align-self: flex-start;

    font-size: var(--small-font-size);
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: inherit;
  }
}

.RecipeConfig {
  align-items: flex-start;

  fieldset {
    display: flex;
    flex-wrap: wrap;
    gap: 0 0.5em;
    padding: 0;
    margin: 0;
    border: 0;

    > * {
      white-space: nowrap;
    }

    @media (max-width: 26em) {
      .legend {
        width: 100%;
      }
    }

    input + label {
      cursor: pointer;
      opacity: 0.45;
      transition: opacity 70ms;
    }

    input:checked + label {
      opacity: 1;
    }
  }

  .field {
    width: 100%;
  }

  li {
    display: flex;
    flex-wrap: wrap;

    .HighlightedText {
      width: 100%;
    }

    .level-info,
    .job-swap-prompt {
      color: var(--text-muted-color);
    }

    .job-swap-prompt {
      margin-left: auto;
    }
  }

  .RecipesByLevel input {
    width: 2.5em;
  }

  .recipe-display {
    display: grid;
    grid-template-columns: repeat(4, auto);
    gap: 0 1.5em; // roughly 3 spaces

    @media (max-width: 38em) {
      grid-template-columns: repeat(2, auto);
    }

    .name {
      grid-column: 1 / -1;
      width: 100%;
    }

    .level {
      color: var(--text-muted-color);
    }
  }

  .prompt {
    color: var(--text-muted-color);
    font-size: var(--small-font-size);
    display: flex;
    column-gap: 0.5em;
  }
}

.CraftStateDisplay {
  h2 {
    display: flex;
    align-items: baseline;
    flex-wrap: wrap;
    column-gap: 0.5em;

    .step {
      color: var(--text-muted-color);
    }

    .success {
      color: var(--blue-400);
    }

    .failure {
      color: var(--orange-600);
    }
  }

  .bars {
    display: flex;
    flex-direction: column;
    gap: var(--05);
  }
}

.Progress {
  display: flex;
  flex-direction: column;
  gap: var(--025);

  label {
    display: flex;
    justify-content: space-between;
    gap: 0.5em;

    .name {
      color: var(--text-muted-color);
    }
  }

  .progress {
    width: 100%;
    height: 0.5em;
    border-radius: var(--border-radius);
    // the same blue as the bar, but with 25% opacity
    background-color: hsl(210, 47%, 21%);

    .bar {
      height: 100%;
      border-radius: var(--border-radius);
      background-color: var(--blue-400);
      transition: width 140ms ease-in-out;
    }
  }
}

.BuffList {
  margin-bottom: var(--025);
  display: flex;
  gap: var(--025);
  min-height: var(--status-icon-height);

  .no-buffs {
    color: var(--text-muted-color);
    font-size: var(--small-font-size);
    margin: auto 0;
  }
}

.ActionPlaylist {
  display: flex;
  flex-direction: column;
  gap: var(--15);

  .PersistentList,
  .MutableList {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    gap: var(--05);

    .Icon.action img {
      transition: filter 70ms;
      filter: brightness(1);

      &:hover {
        filter: brightness(1.25);
      }
    }
  }

  .PersistentList {
    column-gap: var(--15);

    .group {
      display: flex;
      flex-direction: column;
      gap: var(--025);

      .name {
        color: var(--text-muted-color);
        font-size: var(--small-font-size);
      }

      .actions {
        display: flex;
        gap: var(--05);

        button {
          background: none;
          border: 0;
          padding: 0;
          cursor: pointer;

          &[disabled] {
            opacity: 0.3;
            cursor: not-allowed;
          }
        }
      }
    }
  }

  .MutableList {
    background: var(--grey-800);
    min-height: calc(var(--action-icon-height) + var(--1));
    padding: var(--05);
    border-radius: var(--border-radius);
    // overflow into the gutter for better vertical alignment
    width: calc(100% + var(--1));
    margin: 0 calc(-1 * var(--05));
  }

  .SortableIcon {
    cursor: grab;
    position: relative;

    &[aria-pressed] {
      cursor: grabbing;
    }

    &.disabled {
      opacity: 0.4;
    }

    .step {
      position: absolute;
      bottom: 0;
      left: 0;

      text-align: center;
      font-size: var(--small-font-size);
      line-height: 1.25;
      height: 1.25em;
      padding: 0 0.25em;
      // --grey-900, but with alpha transparency
      background: rgba(25, 26, 26, 0.75);
      border-radius: 0 var(--border-radius) 0 0;
      user-select: none;
      pointer-events: none;
    }

    button.remove {
      position: absolute;
      top: 0;
      right: 0;

      width: 1.25em;
      height: 1.25em;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      background: var(--grey-800);
      padding: 0;
      border: 0;
      border-radius: 0 0 0 var(--border-radius);
      cursor: pointer;
      opacity: 0;
      transition: opacity 70ms;
    }

    &:hover:not([aria-pressed]) button.remove {
      opacity: 1;
    }
  }
}
